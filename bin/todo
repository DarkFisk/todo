#!/usr/bin/env node

/**
 * External dependencies.
 */

var argv = require('argvee')();
var fs = require('fs');
var stdin = require('stdin');

/**
 * Internal dependencies.
 */

var todos = require('../lib/todos')();

/**
 * Primary command.
 */

var command = argv.commands.shift();
var db = '/tmp/todos.txt';
var todos = null;

try {
  var contents = fs.readFileSync(db, 'utf8');
  todos = JSON.parse(contents);
} catch(e) {
  todos = [];
}

/**
 * Internal dependencies.
 */

var _todos = require('../lib/todos')(todos);

process.on('uncaughtException', function(err) {
  console.error('todo: ' + err.message);
  process.exit(1);
});

if ('ls' === command) {
  var keywords = argv.commands;
  var include = [];
  var exclude = [];
  var status = 'pending';

  if (~argv.modes.indexOf('done')) {
    status = 'done';
  }

  keywords.forEach(function(keyword) {
    if (keyword[0] === '~') {
      exclude.push(keyword.replace(/^~/, ''));
    } else {
      include.push(keyword);
    }
  });

  todos.filter(function(todo) {
    var ret = include.length === 0 ? true : false;

    include.forEach(function(keyword) {
      if (~todo.desc.indexOf(keyword)) ret = true;
    });

    return ret;
  }).filter(function(todo) {
    var ret = true;

    exclude.forEach(function(keyword) {
      if (~todo.desc.indexOf(keyword)) ret = false;
    });

    return ret;

  }).filter(function(todo) {
    return status === todo.status;
  }).forEach(function(todo) {
    console.log('%d. %s', todo.id, todo.desc);
  });
}

if ('add' === command) {
  var desc = argv.commands.join(' ');
  _todos.create(desc);
}

if ('rm' === command) {
  var id = +argv.commands[0];
  _todos.destroy(id);
}

if ('check' === command) {
  var id = +argv.commands[0];
  _todos.check(id);
}

if ('clear' === command) {
  if (~argv.modes.indexOf('force')) {
    return _todos.clear();
  }

  console.log('Are you sure? (y/n)');

  stdin(function(str) {
    if ('y' !== str.trim()) {
      console.error('Aborting...');
      process.exit(1);
    }
    _todos.clear();
  });
}
