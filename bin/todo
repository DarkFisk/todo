#!/usr/bin/env node

/**
 * External dependencies.
 */

var argv = require('argvee')();
var stdin = require('stdin');

/**
 * Internal dependencies.
 */

var Storage = require('../lib/storage');
var Todos = require('../lib/todos');
var filter = require('../lib/filter');

/**
 * Todos.
 */

var todos = new Todos(new Storage('/tmp/todos.txt'));

/**
 * Catch all errors and print them in a nice-ish way.
 */

process.on('uncaughtException', function(err) {
  console.error('todo: ' + err.message);
  process.exit(1);
});


/**
 * Available commands.
 */

var commands = {

  /**
   * List all todo items.
   *
   * Example:
   *
   *     $ todo ls
   *     $ todo ls @tag ~other
   *     $ todo ls --all
   *     $ todo ls --done
   */

  ls: function() {
    var status = 'pending';

    if (~argv.modes.indexOf('done')) status = 'done';
    if (~argv.modes.indexOf('all')) status = 'all';

    var f = filter(argv.commands);

    todos
      .list(status)
      .filter(function(todo) {
        return f(todo.desc);
      })
      .forEach(function(todo) {
        console.log('%d. %s', todo.id, todo.desc);
      });
  },

  /**
   * Create a new todo item.
   *
   * Example:
   *
   *     $ todo add Go to swimming
   *     $ todo add "Write more Java"
   */

  add: function() {
    todos.create(argv.commands.join(' '));
  },

  /**
   * Remove a todo item.
   *
   * Example:
   *
   *     $ todo rm 1
   */

  rm: function() {
    todos.destroy(argv.commands[0]);
  },

  /**
   * Complete a todo item.
   *
   * Example:
   *
   *     $ todo check 1
   */

  check: function() {
    todos.check(argv.commands[0]);
  },

  /**
   * Undo a completed todo item.
   *
   * Example:
   *
   *     $ todo undo 3
   */

  undo: function() {
    todos.undo(argv.commands[0]);
  },

  /**
   * Clear all todo items.
   *
   * Example:
   *
   *     $ todo clear
   *     $ todo clear --force
   */

  clear: function() {
    if (~argv.modes.indexOf('force')) return todos.clear();

    console.log('Are you sure? (y/n)');

    stdin(function(str) {
      if ('y' === str.trim()) return todos.clear();
      console.error('Aborting...');
      process.exit(1);
    });
  }
};

/**
 * Request command.
 */

var command = argv.commands.shift();

if (commands.hasOwnProperty(command)) {
  commands[command]();
}
