#!/usr/bin/env node

/**
 * External dependencies.
 */

var argv = require('argvee')();
var fs = require('fs');
var stdin = require('stdin');

/**
 * Primary command.
 */

var command = argv.commands.shift();
var db = '/tmp/todos.txt';
var todos = null;

try {
  var contents = fs.readFileSync(db, 'utf8');
  todos = JSON.parse(contents);
} catch(e) {
  todos = [];
}

process.on('uncaughtException', function(err) {
  console.error('todo: ' + err.message);
  process.exit(1);
});

function save() {
  fs.writeFileSync(db, JSON.stringify(todos), 'utf8');
}

function clear() {
  todos = [];
  save();
}

if ('ls' === command) {
  var keywords = argv.commands;

  todos.filter(function(todo) {
    if (keywords.length === 0) {
      return true;
    }

    var ret = false;

    keywords.forEach(function(keyword) {
      if (~todo.desc.indexOf(keyword)) ret = true;
    });

    return ret;
  }).forEach(function(todo) {
    console.log('%d. %s', todo.id, todo.desc);
  });

  process.exit(0);
}

if ('add' === command) {
  var desc = argv.commands.join(' ');

  if (!desc) {
    throw new Error('please enter a todo item');
  }

  var ids = todos.map(function(todo) {
    return todo.id;
  });

  ids.push(0);

  var id = Math.max.apply(null, ids) + 1;
  var todo = { desc: desc, id: id };

  todos.push(todo);
  save();
}

if ('rm' === command) {
  var id = +argv.commands[0];
  var found = false;

  todos = todos.filter(function(todo) {
    var match = todo.id === id;
    if (match) found = true;
    return !match;
  });

  if (!found) {
    throw new Error('Cannot find a todo item with id "' + id + '"');
  }

  save();
}

if ('clear' === command) {
  if (~argv.modes.indexOf('force')) {
    return clear();
  }

  console.log('Are you sure? (y/n)');

  stdin(function(str) {
    if ('y' !== str.trim()) {
      console.error('Aborting...');
      process.exit(1);
    }
    clear();
  });
}
